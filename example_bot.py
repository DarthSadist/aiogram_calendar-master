import logging
import asyncio
import sys
from datetime import datetime, timedelta
from typing import Optional, Tuple

import locale
from logging.handlers import RotatingFileHandler

from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback, DialogCalendar, DialogCalendarCallback
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold
from aiogram.client.default import DefaultBotProperties

from bot_config import API_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            RotatingFileHandler(
                "bot.log",
                maxBytes=10485760,  # 10MB
                backupCount=5,
                encoding="utf-8"
            ),
            logging.StreamHandler(sys.stdout)
        ]
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

try:
    locale.setlocale(locale.LC_ALL, 'ru_RU.utf8')
except locale.Error as e:
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏
class CalendarKeyboards:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    
    @staticmethod
    def get_start_keyboard() -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        kb = [
            [
                KeyboardButton(text='üìÖ –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'),
                KeyboardButton(text='üìÜ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'),
            ],
            [
                KeyboardButton(text='üóì –î–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'),
                KeyboardButton(text='üìä –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≥–æ–¥–æ–º'),
            ],
            [
                KeyboardButton(text='‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–µ –¥–∞—Ç—ã'),
                KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
            ]
        ]
        return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    @staticmethod
    def get_quick_dates_keyboard() -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—ã—Å—Ç—Ä—ã—Ö –¥–∞—Ç"""
        kb = [
            [
                KeyboardButton(text='üìå –°–µ–≥–æ–¥–Ω—è'),
                KeyboardButton(text='üìå –ó–∞–≤—Ç—Ä–∞')
            ],
            [
                KeyboardButton(text='üìå –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é'),
                KeyboardButton(text='üìå –ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏')
            ],
            [
                KeyboardButton(text='üìå –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü'),
                KeyboardButton(text='üìå –ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞')
            ],
            [
                KeyboardButton(text='üìå –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞'),
                KeyboardButton(text='üìå –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞')
            ],
            [
                KeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            ]
        ]
        return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
class UserSettings:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    DATE_FORMATS = {
        "DD.MM.YYYY": "%d.%m.%Y",
        "YYYY-MM-DD": "%Y-%m-%d",
        "MM/DD/YYYY": "%m/%d/%Y"
    }

    @staticmethod
    def get_settings_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = [
            [
                InlineKeyboardButton(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="settings_language"),
                InlineKeyboardButton(text="üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã", callback_data="settings_date_format")
            ],
            [
                InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def get_date_format_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
        keyboard = [
            [InlineKeyboardButton(text="DD.MM.YYYY", callback_data="date_format_dd.mm.yyyy")],
            [InlineKeyboardButton(text="YYYY-MM-DD", callback_data="date_format_yyyy-mm-dd")],
            [InlineKeyboardButton(text="MM/DD/YYYY", callback_data="date_format_mm/dd/yyyy")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

class QuickDates:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–∞—Ç–∞–º–∏"""

    @staticmethod
    def get_quick_dates_keyboard() -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—ã—Å—Ç—Ä—ã—Ö –¥–∞—Ç"""
        kb = [
            [
                KeyboardButton(text='üìå –°–µ–≥–æ–¥–Ω—è'),
                KeyboardButton(text='üìå –ó–∞–≤—Ç—Ä–∞')
            ],
            [
                KeyboardButton(text='üìå –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é'),
                KeyboardButton(text='üìå –ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏')
            ],
            [
                KeyboardButton(text='üìå –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü'),
                KeyboardButton(text='üìå –ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞')
            ],
            [
                KeyboardButton(text='üìå –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞'),
                KeyboardButton(text='üìå –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞')
            ],
            [
                KeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            ]
        ]
        return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    @staticmethod
    def get_date_description(date: datetime) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç—ã —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        weekdays = {
            0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            1: '–≤—Ç–æ—Ä–Ω–∏–∫',
            2: '—Å—Ä–µ–¥–∞',
            3: '—á–µ—Ç–≤–µ—Ä–≥',
            4: '–ø—è—Ç–Ω–∏—Ü–∞',
            5: '—Å—É–±–±–æ—Ç–∞',
            6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        
        day_of_week = weekdays[date.weekday()]
        days_until = (date - datetime.now()).days
        
        if days_until == 0:
            relative_date = "—Å–µ–≥–æ–¥–Ω—è"
        elif days_until == 1:
            relative_date = "–∑–∞–≤—Ç—Ä–∞"
        else:
            relative_date = f"—á–µ—Ä–µ–∑ {days_until} –¥–Ω–µ–π"
            
        return (f"üìÖ –î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}\n"
                f"üìÜ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day_of_week}\n"
                f"‚è≥ –ö–æ–≥–¥–∞: {relative_date}\n"
                f"üìä –≠—Ç–æ {date.timetuple().tm_yday}-–π –¥–µ–Ω—å –≥–æ–¥–∞\n"
                f"üìà –ü—Ä–æ—à–ª–æ –Ω–µ–¥–µ–ª—å —Å –Ω–∞—á–∞–ª–∞ –≥–æ–¥–∞: {date.isocalendar()[1]}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
start_kb = CalendarKeyboards.get_start_keyboard()
quick_dates_kb = QuickDates.get_quick_dates_keyboard()

@dp.message(Command("start"))
async def command_start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_name = message.from_user.full_name
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({message.from_user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {hbold(user_name)}!\n\n"
            f"ü§ñ –Ø –±–æ—Ç-–∫–∞–ª–µ–Ω–¥–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –¥–∞—Ç—É.\n\n"
            f"‚ú® –£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:\n"
            f"üìÖ –ü—Ä–æ—Å—Ç–æ–π - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã\n"
            f"üìÜ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π - —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—è—Ü–∞\n"
            f"üóì –î–∏–∞–ª–æ–≥–æ–≤—ã–π - –ø–æ—à–∞–≥–æ–≤—ã–π –≤—ã–±–æ—Ä\n"
            f"‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–µ –¥–∞—Ç—ã - –¥–ª—è —á–∞—Å—Ç—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n\n"
            f"‚ùî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏\n"
            f"‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∏–ø –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
            reply_markup=start_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("help"))
async def command_help_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        await message.answer(
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "üîπ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n"
            "üîπ /help - –ü–æ–∫–∞–∑ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏\n"
            "üîπ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            "üìÖ –¢–∏–ø—ã –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:\n"
            "1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å - –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤ –æ–¥–∏–Ω –∫–ª–∏–∫\n"
            "2Ô∏è‚É£ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å - —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º\n"
            "3Ô∏è‚É£ –î–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å - –ø–æ—à–∞–≥–æ–≤—ã–π –≤—ã–±–æ—Ä\n"
            "4Ô∏è‚É£ –ë—ã—Å—Ç—Ä—ã–µ –¥–∞—Ç—ã - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã\n\n"
            "‚öôÔ∏è –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "- –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã\n"
            "- –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n\n"
            "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã,\n"
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("settings"))
async def command_settings_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    try:
        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
            reply_markup=UserSettings.get_settings_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /settings: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    try:
        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
            reply_markup=UserSettings.get_settings_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–µ –¥–∞—Ç—ã")
async def quick_dates_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö –¥–∞—Ç
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏:
    - –°–µ–≥–æ–¥–Ω—è/–ó–∞–≤—Ç—Ä–∞
    - –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é/–¥–≤–µ –Ω–µ–¥–µ–ª–∏
    - –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü/—Ç—Ä–∏ –º–µ—Å—è—Ü–∞
    - –ù–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    """
    try:
        await message.answer(
            "‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã\n\n"
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
            "‚Ä¢ –°–µ–≥–æ–¥–Ω—è/–ó–∞–≤—Ç—Ä–∞ - –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö –¥–∞—Ç\n"
            "‚Ä¢ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é/–¥–≤–µ - –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª–∏\n"
            "‚Ä¢ –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü/—Ç—Ä–∏ - –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ù–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –º–µ—Å—è—Ü–∞",
            reply_markup=quick_dates_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±—ã—Å—Ç—Ä—ã—Ö –¥–∞—Ç: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìå –°–µ–≥–æ–¥–Ω—è")
async def today_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã"""
    try:
        today = datetime.now()
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:\n\n{QuickDates.get_date_description(today)}\n\n"
            f"üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=quick_dates_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìå –ó–∞–≤—Ç—Ä–∞")
async def tomorrow_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –¥–∞—Ç—ã"""
    try:
        tomorrow = datetime.now() + timedelta(days=1)
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:\n\n{QuickDates.get_date_description(tomorrow)}\n\n"
            f"üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=quick_dates_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –¥–∞—Ç—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìå –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é")
async def next_week_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é"""
    try:
        next_week = datetime.now() + timedelta(days=7)
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:\n\n{QuickDates.get_date_description(next_week)}\n\n"
            f"üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=quick_dates_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìå –ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏")
async def two_weeks_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏"""
    try:
        two_weeks = datetime.now() + timedelta(days=14)
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:\n\n{QuickDates.get_date_description(two_weeks)}\n\n"
            f"üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=quick_dates_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìå –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü")
async def next_month_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü"""
    try:
        next_month = datetime.now() + timedelta(days=30)
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:\n\n{QuickDates.get_date_description(next_month)}\n\n"
            f"üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=quick_dates_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìå –ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞")
async def three_months_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞"""
    try:
        three_months = datetime.now() + timedelta(days=90)
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:\n\n{QuickDates.get_date_description(three_months)}\n\n"
            f"üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=quick_dates_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìå –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞")
async def start_of_month_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    try:
        today = datetime.now()
        start_of_month = today.replace(day=1)
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:\n\n{QuickDates.get_date_description(start_of_month)}\n\n"
            f"üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=quick_dates_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìå –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞")
async def end_of_month_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    try:
        today = datetime.now()
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        if today.month == 12:
            last_day = today.replace(day=31)
        else:
            last_day = today.replace(month=today.month + 1, day=1) - timedelta(days=1)
        
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:\n\n{QuickDates.get_date_description(last_day)}\n\n"
            f"üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=quick_dates_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
            reply_markup=start_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "settings_language")
async def process_language_setting(callback_query: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"""
    try:
        await callback_query.message.edit_text(
            "üåç –í—ã–±–æ—Ä —è–∑—ã–∫–∞\n\n"
            "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "settings_date_format")
async def process_date_format_setting(callback_query: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
    try:
        await callback_query.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:",
            reply_markup=UserSettings.get_date_format_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "back_to_main")
async def process_back_to_main(callback_query: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        await callback_query.message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
            reply_markup=start_kb
        )
        await callback_query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "back_to_settings")
async def process_back_to_settings(callback_query: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        await callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
            reply_markup=UserSettings.get_settings_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data.startswith("date_format_"))
async def process_date_format_selection(callback_query: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
    try:
        format_type = callback_query.data.replace("date_format_", "")
        format_display = {
            "dd.mm.yyyy": "DD.MM.YYYY",
            "yyyy-mm-dd": "YYYY-MM-DD",
            "mm/dd/yyyy": "MM/DD/YYYY"
        }.get(format_type, "DD.MM.YYYY")
        
        await callback_query.message.edit_text(
            f"‚úÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {format_display}\n"
            f"–¢–µ–ø–µ—Ä—å –¥–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
            reply_markup=UserSettings.get_settings_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìÖ –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def nav_cal_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
        await message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: ",
            reply_markup=await SimpleCalendar().start_calendar()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìÜ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def nav_cal_handler_date(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—è—Ü–∞
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        calendar = SimpleCalendar()
        calendar.set_dates_range(datetime(2022, 1, 1), datetime(2025, 12, 31))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—è—Ü–∞")
        
        await message.answer(
            "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n"
            "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –¥–∞—Ç—É —Å 2022 –ø–æ 2025 –≥–æ–¥:",
            reply_markup=await calendar.start_calendar(year=2024, month=2)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—è—Ü–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(SimpleCalendarCallback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: CallbackData) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    
    Args:
        callback_query (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å
        callback_data (CallbackData): –î–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
    """
    try:
        calendar = SimpleCalendar(show_alerts=True)
        calendar.set_dates_range(datetime(2022, 1, 1), datetime(2025, 12, 31))

        selected, date = await calendar.process_selection(callback_query, callback_data)
        if selected:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: {date}")
            await callback_query.message.answer(
                f'‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date.strftime("%d.%m.%Y")}\n'
                f'üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã.")

@dp.message(F.text == "üóì –î–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def dialog_cal_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
        await message.answer(
            "üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ—à–∞–≥–æ–≤–æ:\n"
            "1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥\n"
            "2Ô∏è‚É£ –ó–∞—Ç–µ–º –º–µ—Å—è—Ü\n"
            "3Ô∏è‚É£ –ò –Ω–∞–∫–æ–Ω–µ—Ü –¥–µ–Ω—å",
            reply_markup=await DialogCalendar().start_calendar()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìä –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≥–æ–¥–æ–º")
async def dialog_cal_handler_year(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≥–æ–¥–æ–º
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≥–æ–¥–æ–º")
        await message.answer(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞—á–∏–Ω–∞—è —Å 1989 –≥–æ–¥–∞:\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ (—Å 1989)\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
            reply_markup=await DialogCalendar().start_calendar(year=1989)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≥–æ–¥–æ–º: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìã –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –º–µ—Å—è—Ü–µ–º")
async def dialog_cal_handler_month(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –º–µ—Å—è—Ü–µ–º
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –º–µ—Å—è—Ü–µ–º")
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞—á–∏–Ω–∞—è —Å –∏—é–Ω—è 1989:\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ (—Å 1989)\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü (–Ω–∞—á–∏–Ω–∞—è —Å –∏—é–Ω—è)\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
            reply_markup=await DialogCalendar().start_calendar(year=1989, month=6)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –º–µ—Å—è—Ü–µ–º: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(DialogCalendarCallback.filter())
async def process_dialog_calendar(callback_query: CallbackQuery, callback_data: CallbackData) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    
    Args:
        callback_query (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å
        callback_data (CallbackData): –î–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
    """
    try:
        selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
        if selected:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: {date}")
            await callback_query.message.answer(
                f'‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date.strftime("%d.%m.%Y")}\n'
                f'üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã.")

async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        bot = Bot(API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    setup_logging()
    asyncio.run(main())
