import logging
import asyncio
import sys
from datetime import datetime
from typing import Optional, Tuple

import locale
from logging.handlers import RotatingFileHandler

from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback, DialogCalendar, DialogCalendarCallback
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.utils.markdown import hbold
from aiogram.client.default import DefaultBotProperties

from bot_config import API_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            RotatingFileHandler(
                "bot.log",
                maxBytes=10485760,  # 10MB
                backupCount=5,
                encoding="utf-8"
            ),
            logging.StreamHandler(sys.stdout)
        ]
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

try:
    locale.setlocale(locale.LC_ALL, 'ru_RU.utf8')
except locale.Error as e:
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏
class CalendarKeyboards:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    
    @staticmethod
    def get_start_keyboard() -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        kb = [
            [
                KeyboardButton(text='üìÖ –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'),
                KeyboardButton(text='üìÜ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'),
            ],
            [
                KeyboardButton(text='üóì –î–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'),
                KeyboardButton(text='üìä –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≥–æ–¥–æ–º'),
            ],
            [
                KeyboardButton(text='üìã –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –º–µ—Å—è—Ü–µ–º')
            ]
        ]
        return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = CalendarKeyboards.get_start_keyboard()

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        user_name = message.from_user.full_name
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({message.from_user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {hbold(user_name)}!\n\n"
            f"ü§ñ –Ø –±–æ—Ç-–∫–∞–ª–µ–Ω–¥–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –¥–∞—Ç—É.\n\n"
            f"‚ú® –£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:\n"
            f"üìÖ –ü—Ä–æ—Å—Ç–æ–π - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã\n"
            f"üìÜ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π - —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—è—Ü–∞\n"
            f"üóì –î–∏–∞–ª–æ–≥–æ–≤—ã–π - –ø–æ—à–∞–≥–æ–≤—ã–π –≤—ã–±–æ—Ä\n\n"
            f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∏–ø –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
            reply_markup=start_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìÖ –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def nav_cal_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
        await message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: ",
            reply_markup=await SimpleCalendar().start_calendar()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìÜ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def nav_cal_handler_date(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—è—Ü–∞
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        calendar = SimpleCalendar()
        calendar.set_dates_range(datetime(2022, 1, 1), datetime(2025, 12, 31))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—è—Ü–∞")
        
        await message.answer(
            "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n"
            "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –¥–∞—Ç—É —Å 2022 –ø–æ 2025 –≥–æ–¥:",
            reply_markup=await calendar.start_calendar(year=2024, month=2)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—è—Ü–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(SimpleCalendarCallback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: CallbackData) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    
    Args:
        callback_query (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å
        callback_data (CallbackData): –î–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
    """
    try:
        calendar = SimpleCalendar(show_alerts=True)
        calendar.set_dates_range(datetime(2022, 1, 1), datetime(2025, 12, 31))

        selected, date = await calendar.process_selection(callback_query, callback_data)
        if selected:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: {date}")
            await callback_query.message.answer(
                f'‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date.strftime("%d.%m.%Y")}\n'
                f'üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã.")

@dp.message(F.text == "üóì –î–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def dialog_cal_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
        await message.answer(
            "üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ—à–∞–≥–æ–≤–æ:\n"
            "1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥\n"
            "2Ô∏è‚É£ –ó–∞—Ç–µ–º –º–µ—Å—è—Ü\n"
            "3Ô∏è‚É£ –ò –Ω–∞–∫–æ–Ω–µ—Ü –¥–µ–Ω—å",
            reply_markup=await DialogCalendar().start_calendar()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìä –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≥–æ–¥–æ–º")
async def dialog_cal_handler_year(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≥–æ–¥–æ–º
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≥–æ–¥–æ–º")
        await message.answer(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞—á–∏–Ω–∞—è —Å 1989 –≥–æ–¥–∞:\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ (—Å 1989)\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
            reply_markup=await DialogCalendar().start_calendar(year=1989)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≥–æ–¥–æ–º: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìã –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –º–µ—Å—è—Ü–µ–º")
async def dialog_cal_handler_month(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –º–µ—Å—è—Ü–µ–º
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –º–µ—Å—è—Ü–µ–º")
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞—á–∏–Ω–∞—è —Å –∏—é–Ω—è 1989:\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ (—Å 1989)\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü (–Ω–∞—á–∏–Ω–∞—è —Å –∏—é–Ω—è)\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
            reply_markup=await DialogCalendar().start_calendar(year=1989, month=6)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –º–µ—Å—è—Ü–µ–º: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(DialogCalendarCallback.filter())
async def process_dialog_calendar(callback_query: CallbackQuery, callback_data: CallbackData) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    
    Args:
        callback_query (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å
        callback_data (CallbackData): –î–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
    """
    try:
        selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
        if selected:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: {date}")
            await callback_query.message.answer(
                f'‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date.strftime("%d.%m.%Y")}\n'
                f'üìù –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã.")

async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        bot = Bot(API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    setup_logging()
    asyncio.run(main())
